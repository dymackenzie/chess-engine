import time, math
from itertools import count
from collections import namedtuple, defaultdict

# chess_board = [
#    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
#    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7", 
#    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
#    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
#    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
#    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
#    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
#    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
# ]

# values for each pieces
PIECE = {"P": 100, "N": 280, "B": 320, "R": 479, "Q": 929, "K": 60000}
# Piece-Square tables to determine where a piece has the most value
PST = {
    'P': (   0,   0,   0,   0,   0,   0,   0,   0,
            78,  83,  86,  73, 102,  82,  85,  90,
            7,  29,  21,  44,  40,  31,  44,   7,
            -17,  16,  -2,  15,  14,   0,  15, -13,
            -26,   3,  10,   9,   6,   1,   0, -23,
            -22,   9,   5, -11, -10,  -2,   3, -19,
            -31,   8,  -7, -37, -36, -14,   3, -31,
            0,   0,   0,   0,   0,   0,   0,   0),
    'N': ( -66, -53, -75, -75, -10, -55, -58, -70,
            -3,  -6, 100, -36,   4,  62,  -4, -14,
            10,  67,   1,  74,  73,  27,  62,  -2,
            24,  24,  45,  37,  33,  41,  25,  17,
            -1,   5,  31,  21,  22,  35,   2,   0,
            -18,  10,  13,  22,  18,  15,  11, -14,
            -23, -15,   2,   0,   2,   0, -23, -20,
            -74, -23, -26, -24, -19, -35, -22, -69),
    'B': ( -59, -78, -82, -76, -23,-107, -37, -50,
            -11,  20,  35, -42, -39,  31,   2, -22,
            -9,  39, -32,  41,  52, -10,  28, -14,
            25,  17,  20,  34,  26,  25,  15,  10,
            13,  10,  17,  23,  17,  16,   0,   7,
            14,  25,  24,  15,   8,  25,  20,  15,
            19,  20,  11,   6,   7,   6,  20,  16,
            -7,   2, -15, -12, -14, -15, -10, -10),
    'R': (  35,  29,  33,   4,  37,  33,  56,  50,
            55,  29,  56,  67,  55,  62,  34,  60,
            19,  35,  28,  33,  45,  27,  25,  15,
            0,   5,  16,  13,  18,  -4,  -9,  -6,
            -28, -35, -16, -21, -13, -29, -46, -30,
            -42, -28, -42, -25, -25, -35, -26, -46,
            -53, -38, -31, -26, -29, -43, -44, -53,
            -30, -24, -18,   5,  -2, -18, -31, -32),
    'Q': (   6,   1,  -8,-104,  69,  24,  88,  26,
            14,  32,  60, -10,  20,  76,  57,  24,
            -2,  43,  32,  60,  72,  63,  43,   2,
            1, -16,  22,  17,  25,  20, -13,  -6,
            -14, -15,  -2,  -5,  -1, -10, -20, -22,
            -30,  -6, -13, -11, -16, -11, -16, -27,
            -36, -18,   0, -19, -15, -15, -21, -38,
            -39, -30, -31, -13, -31, -36, -34, -42),
    'K': (   4,  54,  47, -99, -99,  60,  83, -62,
            -32,  10,  55,  56,  56,  55,  10,   3,
            -62,  12, -57,  44, -67,  28,  37, -31,
            -55,  50,  11,  -4, -19,  13,   0, -49,
            -55, -43, -52, -28, -51, -47,  -8, -50,
            -47, -42, -43, -79, -64, -32, -29, -32,
            -4,   3, -14, -50, -57, -18,  13,   4,
            17,  30,  -3, -14,   6,  -1,  40,  18),
}

# here, we take both the piece values and the piece-square tables and combine them
# we also pad the table with two 0s on all sides for easier illegal-move catches
for k, table in PST.items():
    padrow = lambda row: (0,) + tuple(x + PIECE[k] for x in row) + (0,)
    PST[k] = sum((padrow(table[i * 8 : i * 8 + 8]) for i in range(8)), ())
    PST[k] = (0,) * 20 + PST[k] + (0,) * 20

##############################################



# Lists of possible moves for each piece type.
N, E, S, W = -10, 1, 10, -1
directions = {
    "P": (N, N+N, N+W, N+E),
    "N": (N+N+E, E+N+E, E+S+E, S+S+E, S+S+W, W+S+W, W+N+W, N+N+W),
    "B": (N+E, S+E, S+W, N+W),
    "R": (N, E, S, W),
    "Q": (N, E, S, W, N+E, S+E, S+W, N+W),
    "K": (N, E, S, W, N+E, S+E, S+W, N+W)
}



##############################################

STARTING_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -"

# initializes data structure for initial state
State = namedtuple("State", "board ac wc bc ep")
# board - 120 char representation of the board
# ac - active color
# wc - white castling rights, UPPERCASE
# bc - black castling rights, lowercase
# ep - en passant square

# takes the tuple of initial state and assigns FEN values to it
def load_from_fen(initial_state):
    # all the data from the FEN string
    fen_split = STARTING_FEN.split(' ')
    initial_state = initial_state._replace(ac = fen_split[1])
    # extract UPPERCASE letters from castling_rights
    initial_state = initial_state._replace(wc = ''.join(c for c in fen_split[2] if c.isupper()))
    # extract lowercase letters from castling_rights
    initial_state = initial_state._replace(bc = ''.join(c for c in fen_split[2] if c.islower()))
    initial_state = initial_state._replace(ep = fen_split[3])

    # initialize board with 64 empty characters
    raw_board = "." * 64

    # fill board with values from 
    fenBoard = [x for x in fen_split[0]]
    boardIndex = 0
    for x in fenBoard:
        if x == '/':
            continue
        elif x.isnumeric():
            boardIndex += int(x)
        else:
            place_piece = lambda board, i, p: board[:i] + p + board[i + 1 :]
            raw_board = place_piece(raw_board, boardIndex, x)
            boardIndex += 1

    # initialize padded rows board
    padded_board = ""
    # pad the board with two 0s deep on each side
    padrow = lambda row: " " + row + " "
    for i in range(8):
        padded_board += padrow(raw_board[i * 8 : i * 8 + 8])
    # pad the rows with an " " on each side
    raw_board = " " * 20 + padded_board + " " * 20
    initial_state = initial_state._replace(board = raw_board)
    return initial_state

INITIAL_STATE = load_from_fen(State('board', 'ac', 'wc', 'bc', 'ep')) # values will be replaced by function


